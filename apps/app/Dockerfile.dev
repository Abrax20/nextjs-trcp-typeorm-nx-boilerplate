FROM node:18-alpine AS deps
WORKDIR /app

# set timezone
ENV TZ=Europe/Berlin
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# install system dependencies
RUN apk add --no-cache make gcc g++ python3 git libc6-compat

COPY package.json tsconfig.json tsconfig.base.json .env .env.example env.mjs package-lock.json yarn.lock jest.config.ts jest.preset.js .npmrc .yarnrc nx.json ./

RUN yarn global add nx@16.3.2
RUN yarn install --check-files --frozen-lockfile && yarn cache clean
RUN rm -fr node_modules/.cache

FROM node:18-alpine AS runner
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules

# Copy env
COPY .env .

# Copy dependencies and configs
COPY package.json tsconfig.json tsconfig.base.json .env .env.example env.mjs package-lock.json yarn.lock jest.config.ts jest.preset.js .npmrc .yarnrc nx.json ./

# copy source files
COPY libs/  ./libs/
COPY scripts/  ./scripts/
COPY tools/  ./tools/
COPY apps/ ./apps/

ENV NEXT_TELEMETRY_DISABLED 1

RUN apk add --no-cache make gcc g++ python3 git libc6-compat

RUN npm install -g nx@16.3.2
RUN nx build app

ENV NODE_ENV development

RUN rm -fr node_modules/.cache

EXPOSE 3000
ENV PORT 3000
CMD ["nx", "serve", "app"]
