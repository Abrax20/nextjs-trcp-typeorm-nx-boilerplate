worker_processes  auto;

pid /tmp/nginx.pid;

events {
    worker_connections  1024;
}

http {
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    include /etc/nginx/shared/gzip.nginx.conf;

    proxy_buffers          64 4k;
    proxy_buffer_size         8k;
    proxy_busy_buffers_size   24k;

    client_max_body_size 7M;

    sendfile on;
    server_tokens off;
    absolute_redirect off;

    ssl_certificate     /etc/nginx/ssl/ssl.crt.pem;
    ssl_certificate_key /etc/nginx/ssl/ssl.key.pem;

    ssl_session_timeout 1d;
    ssl_session_cache shared:MozSSL:10m;
    ssl_session_tickets off;

    ssl_protocols TLSv1.3;
    ssl_prefer_server_ciphers off;

    server {
        listen 8080 default;
        return 301 https://$host$request_uri;
    }

    server {
        listen 8443 ssl http2;

        # this is the internal Docker DNS, cache only for 30s
        # use $upstream to skip the service availability check,
        # which allows starting only some of the Docker services
        resolver 127.0.0.11 valid=30s;

        location /external/api {
          set $upstream http://backend:8080;
          include /etc/nginx/shared/proxy.nginx.conf;
          include /etc/nginx/shared/cors.nginx.conf;
          proxy_pass $upstream;
        }

        location / {
          # reverse proxy for next server
          set $upstream http://app:4200;
          proxy_pass $upstream;
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection 'upgrade';
          proxy_set_header Host http://localhost:4200;
          proxy_cache_bypass $http_upgrade;

          # we need to remove this 404 handling
          # because next's _next folder and own handling
          # try_files $uri $uri/ =404;
        }
    }
}
